/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.w2m.superheroes.api;

import com.w2m.superheroes.model.SuperHeroe;
import com.w2m.superheroes.model.SuperHeroes;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-23T15:28:01.973474800-03:00[America/Buenos_Aires]")
@Validated
@Api(value = "Superheroe", description = "the Superheroe API")
public interface SuperheroeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /superheroe : Creación de super heroe.
     *
     * @param superHeroe requets (required)
     * @return Created (status code 201)
     */
    @ApiOperation(value = "Creación de super heroe.", nickname = "createSuperHeroe", notes = "", response = SuperHeroe.class, tags={ "superheroe", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = SuperHeroe.class) })
    @PostMapping(
        value = "/superheroe",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SuperHeroe> createSuperHeroe(@ApiParam(value = "requets" ,required=true )  @Valid @RequestBody SuperHeroe superHeroe) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"comment\" : \"comment\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /superheroe/{id} : Eliminación de superHeroe.
     *
     * @param id id del superheroe (required)
     * @return Ok (status code 200)
     */
    @ApiOperation(value = "Eliminación de superHeroe.", nickname = "deleteSuperHeroe", notes = "", tags={ "superheroe", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok") })
    @DeleteMapping(
        value = "/superheroe/{id}"
    )
    default ResponseEntity<Void> deleteSuperHeroe(@ApiParam(value = "id del superheroe",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /superheroes : Busca todos los superheroes del registro.
     *
     * @return  (status code 200)
     */
    @ApiOperation(value = "Busca todos los superheroes del registro.", nickname = "findAllSuperheroes", notes = "", response = SuperHeroes.class, tags={ "superheroe", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = SuperHeroes.class) })
    @GetMapping(
        value = "/superheroes",
        produces = { "application/json" }
    )
    default ResponseEntity<SuperHeroes> findAllSuperheroes() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"name\" : \"name\", \"comment\" : \"comment\", \"id\" : \"id\" }, { \"name\" : \"name\", \"comment\" : \"comment\", \"id\" : \"id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /superheroes/{search} : Busca todos los superheroes del registro.
     *
     * @param search Nombre del superheroe (required)
     * @return  (status code 200)
     */
    @ApiOperation(value = "Busca todos los superheroes del registro.", nickname = "findAllSuperheroesBySearchCriteria", notes = "", response = SuperHeroes.class, tags={ "superheroe", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = SuperHeroes.class) })
    @GetMapping(
        value = "/superheroes/{search}",
        produces = { "application/json" }
    )
    default ResponseEntity<SuperHeroes> findAllSuperheroesBySearchCriteria(@ApiParam(value = "Nombre del superheroe",required=true) @PathVariable("search") String search) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"name\" : \"name\", \"comment\" : \"comment\", \"id\" : \"id\" }, { \"name\" : \"name\", \"comment\" : \"comment\", \"id\" : \"id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /superheroe/{id} : Busca un super heroe dentro del registro.
     *
     * @param id id del superheroe (required)
     * @return  (status code 200)
     */
    @ApiOperation(value = "Busca un super heroe dentro del registro.", nickname = "findSuperheroeById", notes = "", response = SuperHeroe.class, tags={ "superheroe", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = SuperHeroe.class) })
    @GetMapping(
        value = "/superheroe/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<SuperHeroe> findSuperheroeById(@ApiParam(value = "id del superheroe",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"comment\" : \"comment\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /superheroe : Modificación de superHeroe.
     *
     * @param superHeroe requets (required)
     * @return Ok (status code 200)
     */
    @ApiOperation(value = "Modificación de superHeroe.", nickname = "modifySuperHeroe", notes = "", response = SuperHeroe.class, tags={ "superheroe", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = SuperHeroe.class) })
    @PutMapping(
        value = "/superheroe",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SuperHeroe> modifySuperHeroe(@ApiParam(value = "requets" ,required=true )  @Valid @RequestBody SuperHeroe superHeroe) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"comment\" : \"comment\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
